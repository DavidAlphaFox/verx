#!/usr/bin/env escript

%%%
%%% Command line interface using the libvirt remote protocol
%%%
-include_lib("kernel/include/file.hrl").
-include("$PWD/include/verx.hrl").

main(Opt) ->
    % load vert
    true = code:add_pathz(filename:dirname(escript:script_name())
        ++ "/../ebin"),

    true = code:add_pathz(filename:dirname(escript:script_name())
        ++ "/../deps/procket/ebin"),

    % load srly for tcsetattr (optional)
    code:add_pathz(filename:dirname(escript:script_name())
        ++ "/../deps/srly/ebin"),

    call(Opt).

call(["create", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Ref} = connect(Opt),

    {ok, [Domain]} = case file:read_file(Name) of
        {ok, XML} ->
            verx:domain_define_xml(Ref, [XML]);
        {error, enoent} ->
            lookup(Ref, {domain, Name})
        end,
    rp(verx:domain_create(Ref, [Domain]));

call(["define", File | Arg]) ->
    Opt = getopt(Arg),
    {ok, Ref} = connect(Opt),
    {ok, XML} = file:read_file(File),
    rp(verx:domain_define_xml(Ref, [XML]));

call(["destroy", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Ref} = connect(Opt),
    {ok, [Domain]} = lookup(Ref, {domain, Name}),
    rp(verx:domain_destroy(Ref, [Domain]));

call(["dumpxml", Name | Arg]) ->
    Opt = getopt(Arg),
    Flags = proplists:get_value("flags", Opt, 0),
    {ok, Ref} = connect(Opt),
    {ok, [Domain]} = lookup(Ref, {domain, Name}),
    rp(verx:domain_get_xml_desc(Ref, [Domain, Flags]));

call(["list", "--all" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Ref} = connect(Opt),

    {ok, [NumDef]} = verx:num_of_defined_domains(Ref),

    {ok, [NumRun]} = verx:num_of_domains(Ref),

    {ok, [Shutoff]} = verx:list_defined_domains(Ref, [NumDef]),
    {ok, [Running]} = verx:list_domains(Ref, [NumRun]),

    rp({ok, [{running, domains(Ref, Running)},
             {shutoff, domains(Ref, Shutoff)}]});

call(["list" | Arg]) ->
    Opt = getopt(Arg),
    {ok, Ref} = connect(Opt),
    {ok, [N]} = verx:num_of_domains(Ref),
    {ok, [Domains]} =  verx:list_domains(Ref, [N]),

    rp(domains(Ref, Domains));

call(["screenshot", Name | Arg]) ->
    Opt = getopt(Arg),
    Screen = proplists:get_value("screen", Opt, 0),
    Flags = proplists:get_value("flags", Opt, 0),
    File = proplists:get_value("file", Opt,
            Name ++ "_" ++ os:getpid() ++ ".screen"),
    {ok, Ref} = connect(Opt),

    {ok, [Domain]} = lookup(Ref, {domain, Name}),

    {ok, Mime} = verx:domain_screenshot(Ref, [Domain, Screen, Flags]),
    {ok, Buf} = verx_client:recv(Ref),

    ok = file:write_file(File, Buf),

    rp({ok, Mime, File});

call(["shutdown", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Ref} = connect(Opt),
    {ok, [Domain]} = lookup(Ref, {domain, Name}),
    rp(verx:domain_shutdown(Ref, [Domain]));

call(["undefine", Name | Arg]) ->
    Opt = getopt(Arg),
    {ok, Ref} = connect(Opt),
    {ok, [Domain]} = lookup(Ref, {domain, Name}),
    rp(verx:domain_undefine(Ref, [Domain]));

call(_) ->
    Help = [
        "create",
        "define",
        "destroy",
        "dumpxml",
        "list",
        "list --all"
        "screenshot",
        "undefine"
    ],
    rp(Help),
    halt(1).


%%-------------------------------------------------------------------------
%%% Internal functions
%%-------------------------------------------------------------------------
rp(Term) ->
    io:format("~p~n", [Term]).

connect(Opt) ->
    URI = proplists:get_value("uri", Opt, "qemu:///system"),
    {ok, Ref} = verx_client:start_link(),
    ok = verx:open(Ref, [URI, 0]),
    {ok, Ref}.

getopt(Opts) ->
    getopt(Opts, []).
getopt([], Acc) ->
    lists:reverse(Acc);
getopt(["--" ++ Key, "--" ++ _ = Val | Rest], Acc) ->
    getopt([Val|Rest], [{Key, true}|Acc]);
getopt(["--" ++ Key], Acc) ->
    getopt([], [{Key, true}|Acc]);
getopt(["--" ++ Key, Val | Rest], Acc) ->
    getopt(Rest, [{Key, Val}|Acc]).

domains(Ref, Domains) ->
    [ begin
        {ok, [{Name, UUID, Id}]} = if
                is_integer(N) -> verx:domain_lookup_by_id(Ref, [N]);
                is_binary(N) -> verx:domain_lookup_by_name(Ref, [N])
            end,
        {Name, [{uuid, UUID}, {id, Id}]}
      end || N <- Domains ].

lookup(Ref, {domain, Name}) ->
    Fun = [ fun() -> verx:domain_lookup_by_id(Ref, [list_to_integer(Name)]) end,
            fun() -> verx:domain_lookup_by_name(Ref, [list_to_binary(Name)]) end ],
    lookup_1(Fun).

lookup_1(Fun)  ->
    lookup_1(Fun, []).
lookup_1([], [{error, Error}|_]) ->
    {error, Error};
lookup_1([Fun|Tail], Acc) ->
    try Fun() of
        {ok, Res} ->
            {ok, Res};
        {error, Error} ->
            lookup_1(Tail, [{error, Error}|Acc])
    catch
        _:_ ->
            lookup_1(Tail, Acc)
    end.
